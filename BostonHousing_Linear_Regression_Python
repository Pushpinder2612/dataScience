#Python code to do a multiple linear regression
#Using MEDV as the dependent variable (Y) and CRIM, CHAS, RM (crime rate, adjoining river or not, avg # of rooms) as IVs (x's)

#Using Spyder IDE, which I like better than Jupyter notebooks
#Read the file
import pandas as pd

bostonHouses = pd.read_excel(r'C:\Users\DT-045\Downloads\BostonHousing_wip.xls')
print(bostonHouses)
type(bostonHouses)
#a) MLR on predicting MEDV as fn of CRIM, CHAS & RM 
x = bostonHouses[['CRIM', 'CHAS', 'RM']]
y = bostonHouses['MEDV']

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

#Initialise the model
model_a = LinearRegression()
#Train the model
model_a.fit(x,y)

predicted_medv = model_a.predict(x)

#RMSE
rmse_a = mean_squared_error(y,predicted_medv)
print(rmse_a) 
#RMSE = 37.76470116288143
r2_a = r2_score(y,predicted_medv)
r2_a
#R2 = 0.5526545876050155

print('Slope: ', model_a.coef_)
#Slopes (b1,b2,b3): [-0.26072441  3.76303705  8.27817981]
print('Intercept: ', model_a.intercept_)
#intercept: -28.81068250635914

#b) equation: 
#   MEDV = -28.81068250635914 + (CRIM* -0.26072441) + (CHAS* 3.76303705) + (RM* 8.27817981)
#c)
print(-28.81068250635914 + (0.1* -0.26072441) + (0* 3.76303705) + (3* 8.27817981))
#-4.00221551735914
